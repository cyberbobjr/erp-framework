<?php

    namespace OperationsManager\Model\Table;

    use Cake\ORM\Query;
    use Cake\ORM\RulesChecker;
    use Cake\ORM\Table;
    use Cake\Validation\Validator;

    /**
     * TypeOps Model
     *
     * @property OperationsTable|\Cake\ORM\Association\HasMany $Operations
     *
     * @method \OperationsManager\Model\Entity\TypeOp get($primaryKey, $options = [])
     * @method \OperationsManager\Model\Entity\TypeOp newEntity($data = NULL, array $options = [])
     * @method \OperationsManager\Model\Entity\TypeOp[] newEntities(array $data, array $options = [])
     * @method \OperationsManager\Model\Entity\TypeOp|bool save(\Cake\Datasource\EntityInterface $entity, $options = [])
     * @method \OperationsManager\Model\Entity\TypeOp saveOrFail(\Cake\Datasource\EntityInterface $entity, $options = [])
     * @method \OperationsManager\Model\Entity\TypeOp patchEntity(\Cake\Datasource\EntityInterface $entity, array $data, array $options = [])
     * @method \OperationsManager\Model\Entity\TypeOp[] patchEntities($entities, array $data, array $options = [])
     * @method \OperationsManager\Model\Entity\TypeOp findOrCreate($search, callable $callback = NULL, $options = [])
     *
     * @mixin \Cake\ORM\Behavior\TimestampBehavior
     */
    class TypeOpsTable extends Table
    {
        /**
         * Initialize method
         *
         * @param  array  $config  The configuration for the Table.
         * @return void
         */
        public function initialize(array $config)
        {
            parent::initialize($config);

            $this->setTable('type_ops');
            $this->setDisplayField('label');
            $this->setPrimaryKey('id');

            $this->addBehavior('Timestamp');

            $this->hasMany('Operations', [
                'foreignKey' => 'type_op_id',
                'className'  => 'OperationsManager.Operations'
            ]);
        }

        /**
         * Default validation rules.
         *
         * @param  Validator  $validator  Validator instance.
         * @return Validator
         */
        public function validationDefault(Validator $validator)
        {
            $validator
                ->integer('id')
                ->allowEmptyString('id', 'create');

            $validator
                ->scalar('plugin')
                ->maxLength('plugin', 255)
                ->requirePresence('plugin', 'create')
                ->allowEmptyString('plugin', FALSE);

            $validator
                ->scalar('label')
                ->maxLength('label', 255)
                ->requirePresence('label', 'create')
                ->allowEmptyString('label', FALSE);

            $validator
                ->boolean('receipt')
                ->allowEmptyString('receipt', FALSE);

            return $validator;
        }

        public function buildRules(RulesChecker $rules)
        {
            $rules->add($rules->isUnique(['label'], __('Label already exist')));
            return parent::buildRules($rules); // TODO: Change the autogenerated stub
        }

        public function addTypeOps(string $pluginName, string $label, $chooseable = TRUE)
        {
            $newType = $this->newEntity(['plugin'     => $pluginName,
                                         'label'      => $label,
                                         'chooseable' => $chooseable]);
            return $this->save($newType);
        }

        public function deleteByPluginNameAndLabel(string $pluginName, string $label)
        {
            if ($this->isUsed($pluginName, $label)) {
                return FALSE;
            }
            try {
                $entity = $this->find()
                               ->where(['plugin' => $pluginName,
                                        'label'  => $label])
                               ->first();
                if ($entity) {
                    return $this->delete($entity);
                }
                return TRUE;
            } catch (\Exception $ex) {
                debug($ex->getMessage());
                return FALSE;
            }
        }

        public function isUsed(string $pluginName, string $label): bool
        {
            $entity = $this->find()
                           ->where(['plugin' => $pluginName,
                                    'label'  => $label])
                           ->first();
            if (!$entity) {
                return FALSE;
            }
            return ($this->Operations->find()
                                     ->where(['type_op_id' => $entity->id])
                                     ->count() > 0);
        }

        public function findList(Query $query, array $options)
        {
            $query = $query->where(['chooseable' => TRUE]);
            return parent::findList($query, $options); // TODO: Change the autogenerated stub
        }

    }
